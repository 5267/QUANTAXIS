{
  "name": "QUANTAXIS",
  "tagline": "quantaxis  量化工具箱",
  "body": "# QUANTAXIS 量化金融工具箱\r\n![AppVeyor branch](https://img.shields.io/appveyor/ci/gruntjs/grunt/master.svg?maxAge=2592000)\r\n![download](https://img.shields.io/badge/Download-47~140Mb-green.svg)\r\n![version](https://img.shields.io/badge/Version-%203.0.0%20beta-orange.svg)\r\n![author](https://img.shields.io/badge/Powered%20by-%20%20yutiansut-red.svg)\r\n![website](https://img.shields.io/badge/Website-%20www.yutiansut.com-lightgrey.svg)\r\n![language](https://img.shields.io/badge/%20%20%20Language%20%20%20-%20%20%20Matlab%2FPython%2FJS%20%20-lightgrey.svg)\r\n![license](https://img.shields.io/badge/License-%20MIT-brightgreen.svg)\r\n\r\n![quantaxis 3.0 beta](https://github.com/yutiansut/QUANTAXIS/blob/3.0/Picture/QUANTAXIS.jpg)\r\n\r\n\r\n[Website]:www.yutiansut.com | http://quantaxis.yutiansut.com<br>\r\n[Contact]:QQ 279336410<br>\r\n\r\n\r\n## 更新日志 QA3.0  新增数据中心 [DATACENTER 主要负责数据可视化](https://github.com/yutiansut/QUANTAXIS/blob/master/DataCenter/readme.md)\r\n----\r\n将matlab的及时数据以json格式保存到状态空间或者mysql中\r\n\r\n使用ajax技术对于mysql数据进行抽取，使用dc.js等可视化javascript将数据展示在页面上，形成交互式的数据可视化方案\r\n\r\n![quantaxis 3.0 beta](https://github.com/yutiansut/QUANTAXIS/blob/3.0/Picture/QA3.0.png)\r\n\r\n![quantaxis datacenter](https://github.com/yutiansut/QUANTAXIS/blob/3.0/Picture/QADC.gif)\r\n\r\n----\r\n>QUANTAXIS本身是作者在大四时，学习量化交易以及策略实现的时候，发现matlab上面并没有称心如意的量化平台，而主流的量化平台则基于python和java，于是萌生了自己写一个量化工具箱的想法\r\n\r\n## [Version History](https://github.com/yutiansut/QUANTAXIS/releases)\r\n1.0版本使用的主要是新浪网的数据。<br>1.5版本是在了解了对象化编程OOP以后对于平台做的改进\r\n<br>2.0版本主要是对于数据源进行了更换，并重新写了数据库连接和调用函数。从2.0起，quantaxis使用wind服务商提供的量化交易数据并选择mysql作为数据存储方式。\r\n<br>2.5版本则主要增加了交易内核 QUANTCORE 1.0 QC1.0还是一个静态的交易系统，成交的判断方式是以策略报价和历史成交价区间的比较进行判定。\r\n\r\n\r\n```\r\n[Attention]:QUANTAXIS在使用之前需要安装Wind大奖章免费应用 以及 Mysql 5.6以上版本+JDBC-MYSQL的数据库\r\n以上两个的安装文件都在QUANTAXIS/Auxiliary中 clone到本地后打开link.md下载安装即可\r\n\r\nJDBC添加完成后需要在Classpath文件中增加\r\n\r\n>  $matlabroot/java/jar/toolbox/mysql-connector-java-5.1.7-bin.jar\r\n\r\n```\r\n## [QUANTAXIS](https://github.com/yutiansut/QUANTAXIS/blob/master/QUANTAXIS.m)\r\n调用类 classdef [xx] < QUANTAXIS\r\n----\r\n主函数 主要是一个量化平台，负责策略实现和数据更新\r\n类似的平台 如python下的[easytrader](https://github.com/shidenggui/easytrader)\r\n```\r\nQA=QUANTAXIS;\r\nQA.Init()   初始化平台（数据库连接设置等）\r\nQA.Fetch()  数据更新平台\r\nQA.Start()  策略回测平台\r\n```\r\n\r\n## [QUANTAXIS FREEMARKETS](https://github.com/yutiansut/QUANTAXIS/blob/master/%2BFreeMarkets/%2BMultiDealer/FreeMarkets.m)\r\n调用类 classdef [xx] < FreeMarkets.MultiDealer.FreeMarkets\r\n----\r\n```\r\nFM=FreeMarkets;\r\nFM.Try();  一个随机策略的金融市场\r\n>数据将在FM.Price.History 中呈现\r\n>FM.BidPool中是报价池\r\n\r\n```\r\n\r\n\r\n<big>关于quantaxis-FreeMarkets</big>\r\n### 动态匹配交易池系统和自衍生随机策略系统\r\n\r\n-------\r\n\r\n主要考虑的问题在于这个是一个闭环的复合机制\r\n\r\n首先 价格会导致市场上所有的交易者的预期改变，交易者的预期改变会改变他们的报价\r\n他们的报价改变会影响成交价和成交量\r\n\r\n而成交价和量的改变会进一步形成新的市场价格进行下一个循环\r\n\r\n\r\n使用id去控制每一步 或者说过程的每一步\r\n\r\n-------\r\n>循环\r\n\r\n询价阶段\r\n按照round\r\n每一个[Memeber]进行报价,以一个对象的形式按包表达出来 \r\n结构是  Strategy-BID[id]-Price-Amount\r\n并回调给系统\r\n\r\n系统会以这种形式接收\r\n[Price-Amount-Date-Varities-StrategyID-SystemTime] 并记录到[FM.BidPool.Board]中\r\n\r\n系统在记录了报价单并形成报价池之后，会进行下一步的回调\r\n\r\n将报价单中的数据交给一个交易函数  并形成价格\r\n`````\r\nnotify(FM,'transaction')\r\n`````\r\n\r\nFM.transaction 函数对于报价池中的报价按量进行对冲并形成价格\r\n\r\n\r\n>>To Do List\r\n需要对于撤单以及相关的功能进一步完善\r\n\r\n几个函数的主要功能\r\n\r\n### FM.TSBoard 价格形成函数\r\n\r\n得到回调的价格并记录相关\r\n改变当前系统价格\r\n\r\n\r\n### FM.REPLY 客户端策略函数\r\n\r\n不同的策略会根据价格的变化改变预期（报价），并将修改后的报价提交给系统\r\nround控制\r\n\r\n### FM.ASK 询价函数\r\n\r\n系统根据用户的不同的报价，记录到报价池并动态匹配报价和量\r\n如果出现可以对冲的报价就进行对冲并回调价格\r\n\r\n\r\n## [QUANTAXIS-TEST 函数接口测试](https://github.com/yutiansut/QUANTAXIS/blob/master/TestMarkets.m)\r\n测试类\r\n```\r\nTM=TestMarkets;  %初始化测试\r\n```\r\n集成类以后可以使用继承类的接口，同时，在使用了包package以后，不能直接调用FreeMarkets.m的函数",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}